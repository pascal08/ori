#!/usr/bin/env bash

# Directory of this file
CURRENT_DIR="$(dirname "${BASH_SOURCE[0]}")"

# Absolute path to project directory
PROJECT_DIR="$(dirname "$( cd ${CURRENT_DIR} && pwd )")"

# Absolute path to packages directory
PACKAGE_DIR="${PROJECT_DIR}/packages/"

# Import common functions
source "${PROJECT_DIR}/etc/bash/common.lib.sh"

# Argument 1: Package path
run_static_analysis_package()
{
    local exit_code=0

    run_composer_install "$1" || exit_code=$?
    composer show --ansi --no-interaction

    cd "${pwd}" 2>/dev/null
    exit_on_error "Cannot change current directory to $1"

    return ${exit_code}
}

# Argument 1: Package path
run_composer_install()
{
    local command="composer install --ansi --no-interaction --prefer-dist --quiet"

    run_command "${command}
}

display_help_message()
{
    print_info "Usage: $0 [--no-cache] [--reset-cache] <package paths or names>"

    print_info "Packages:"

    echo "$(locate_packages | package_path_to_package_name)"
}

# Arguments: $#
read_input()
{
    if [[ $# -gt 0 ]]; then
        case "$1" in
            --no-cache)
                options+=("no-cache")
            ;;
            --reset-cache)
                options+=("reset-cache")
            ;;
            --help)
                display_help_message
                exit 0
            ;;
            -*)
                print_error "Unknown option \"$1\""
                exit 1
            ;;
            *)
                echo "$1"
            ;;
        esac
    fi

    if [[ "${packages[@]}" = "" ]]; then
        display_help_message
        exit 1
    fi
}

# Argument 1: Package name
main()
{
    local packages_string="$(locate_packages | package_path_to_package_name)"
    local packages=(${packages_string// / })
    local package_path

    package="$(read_input "$@")"

    if [[ ! -z ${package} ]]; then
        packages=(${package})
    fi

    for package in "${packages[@]}"; do
        package_path="$(cast_package_argument_to_package_path "${package}")"

        exit_on_error "Package \"${package}\" is not found"

        install_package "${package_path}" "${options[*]}"

        print_empty_line
    done
}

main "$@"